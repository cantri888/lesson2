# Задача № 6: Реализовать структуру данных «Товары».
#             Она должна представлять собой список кортежей.
#             Каждый кортеж хранит информацию об отдельном товаре.
#             В кортеже должно быть два элемента — номер товара и словарь с параметрами,
#             то есть характеристиками товара: название, цена, количество, единица измерения.
#             Структуру нужно сформировать программно, запросив все данные у пользователя.
#
#             Пример готовой структуры:
#                 [
#                  (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
#                  (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
#                  (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
#                 ]
#
#             Нужно собрать аналитику о товарах.
#             Реализовать словарь, в котором каждый ключ — характеристика товара, например, название.
#             Тогда значение — список значений-характеристик, например, список названий товаров.
#
#             Пример:
#                 {
#                  “название”: [“компьютер”, “принтер”, “сканер”],
#                  “цена”: [20000, 6000, 2000],
#                  “количество”: [5, 2, 7],
#                  “ед”: [“шт.”]
#                 }
# Решение:

data_structure_goods = []  # структура данных 'ТОВАР'; изначально - обычный список
num_goods = 0  # номер товара
temp_list = []  # список, где, благодаря функции split будут хранится введеные параметры
product_analytics = {}  # словарь для аналитики структуры данных 'ТОВАР'

print('Чтобы создать структуру данных необходимо ввести 4 параметра с разделителем - ПРОБЕЛ.')
print('Введите, пожалуйста, данные в таком формате: НАЗВАНИЕ ЦЕНА КОЛИЧЕСТВО ЕДИНИЦА_ИЗМЕРЕНИЯ')
print('Для выхода введите -1.')
print()

# пока ПРАВДА:
while (True):
    num_goods += 1  # увеличиваем номер товара на +1

    # с помощью функции split и разделителя ПРОБЕЛ считываем параметры
    temp_list = input(f'Товар № {num_goods}: ').split()

    # выход из цикла
    if (temp_list == ['-1']):
        break

    # если так оказалась, что ввели больше 4 параметров или меньше
    # то ввод будет повторятся до тех пор, пока не введут 4 параметра или не будет введено -1
    while (len(temp_list) != 4):
        print('Ошибка ввода. Необходимо ввести 4 параметра!')

        temp_list = input(f'Товар № {num_goods}: ').split()

        # выход из цикла
        if (temp_list == ['-1']):
            break

    # если ввод параметров удачный, то каждый элемент из списка берется поочередно и вставляется в значение словаря
    data_structure_goods.append((num_goods, {'название': temp_list[0],
                                             'цена': int(temp_list[1]),
                                             'количество': int(temp_list[2]),
                                             'ед.': temp_list[3]}))

# пример: 1. Ввели: Товар № 1: куртка 1500 3 шт.
#         2. Ввели: Товар № 2: штаны 750 10 шт.
#         3. Ввели: -1 (выход из цикла)
#         4. Структура данных = [(1, {'название': 'куртка', 'цена': 1500, 'количество': 3, 'ед.': 'шт.'}),
#                                (2, {'название': 'штаны', 'цена': 750, 'количество': 10, 'ед.': 'шт.'})
#                               ]

# i принимает значение в 1-ой итерации: (1, {'название': 'куртка', 'цена': 1500, 'количество': 3, 'ед.': 'шт.'}) и т.д.
for i in data_structure_goods:
    # j - это ключ словаря
    # k - это значение ключа j
    # эти переменные берут значение из списка (кортежа) i под ПЕРВЫМ индексом
    # т.к. в НУЛЕВОМ индексе всегда находится порядковый номер товара
    # метод itemp - возвращает пару: ключ-значение для каждого словаря (их 4)
    for j, k in i[1].items():
        # если ключ словаря уже есть в создаваемом словаре
        # то в значении словаря добавляем значение в виде элемента списка
        if j in product_analytics:
            product_analytics[j].append(k)
        # если ключ словаря отсутсвует в создаваемом словаре
        # то он добавляется в создаваемый словарь
        else:
            product_analytics[j] = [k]

print(product_analytics)

